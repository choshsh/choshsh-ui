plugins {
  id 'org.springframework.boot' version '2.7.4'
  id 'io.spring.dependency-management' version '1.0.14.RELEASE'
  id 'java'
  id 'com.google.cloud.tools.jib' version '3.3.0'
  id("org.springdoc.openapi-gradle-plugin") version "1.4.0"
  id 'org.hidetake.swagger.generator' version '2.19.2'
}

group = 'com.choshsh'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}

ext {
  set('springCloudVersion', "2021.0.4")
}

// API docs config (ref: https://springdoc.org)
swaggerSources {
  choshsh {
    inputFile = file('build/openapi.json')
    code {
      outputDir = file('docs')
      language = 'html2'
    }
  }
}

// Docker image config (ref: https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin)
def imageTags = []
if (project.hasProperty("tag")) imageTags.add(project.getProperty("tag"))

jib {
  from {
    image = "amazoncorretto:17"
    platforms {
      platform {
        architecture = "arm64"
        os = "linux"
      }
      platform {
        architecture = "amd64"
        os = "linux"
      }
    }
  }
  to {
    image = "choshsh/choshsh-ui"
    tags = imageTags
  }
  container {
    creationTime = "USE_CURRENT_TIMESTAMP"
    jvmFlags = ['-XX:+UseContainerSupport', '-Dfile.encoding=UTF-8']
    ports = ['8080']
    labels = [maintainer: 'choshsh <cho911115@gmail.com>']
    user = "1000:1000"
  }
}


dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-webflux'
  implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.springdoc:springdoc-openapi-ui:1.6.11'
  implementation 'com.google.guava:guava:31.1-jre'
  implementation 'io.micrometer:micrometer-registry-prometheus:1.9.4'
  compileOnly 'org.projectlombok:lombok'
  developmentOnly 'io.netty:netty-resolver-dns-native-macos:4.1.82.Final:osx-aarch_64' // For M1 Macbook. Solve DNS error.
  runtimeOnly 'mysql:mysql-connector-java'
  runtimeOnly 'com.h2database:h2'
  annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
  annotationProcessor 'org.projectlombok:lombok'
  testAnnotationProcessor 'org.projectlombok:lombok'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  swaggerCodegen 'org.openapitools:openapi-generator-cli:6.2.0'
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}
dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}

tasks.named('test') {
  useJUnitPlatform()
}

tasks.named('bootRun') {
  String activeProfile = System.properties['spring.profiles.active']
  systemProperty "spring.profiles.active", activeProfile
}
